-- Table: Customers
CREATE TABLE Customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(100),
    city VARCHAR(50)
);

-- Table: Orders
CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    product_id INT,
    order_date DATE,
    amount DECIMAL(10, 2),
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

-- Table: Products (NEW)
CREATE TABLE Products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(100),
    price DECIMAL(10, 2)
);

-- Sample Customers
INSERT INTO Customers VALUES
(1, 'Alice', 'Delhi'),
(2, 'Bob', 'Mumbai'),
(3, 'Charlie', 'Chennai'),
(4, 'Diana', 'Kolkata'),
(5, 'Evan', NULL); -- NULL city for join edge case

-- Sample Products
INSERT INTO Products VALUES
(201, 'Laptop', 60000),
(202, 'Tablet', 25000),
(203, 'Smartphone', 30000);

-- Sample Orders (some customers donâ€™t order, some products never ordered)
INSERT INTO Orders VALUES
(101, 1, 201, '2023-06-01', 250.00),
(102, 1, 202, '2023-06-05', 400.00),
(103, 3, 203, '2023-06-10', 150.00);

-- Show all Customers
SELECT * FROM Customers;

-- Show all Orders
SELECT * FROM Orders;

-- Show all Products
SELECT * FROM Products;

-- INNER JOIN Customers & Orders
SELECT c.name, o.order_id, o.amount
FROM Customers c
INNER JOIN Orders o ON c.customer_id = o.customer_id;

-- LEFT JOIN (see customers with/without orders)
SELECT c.name, o.order_id, o.amount
FROM Customers c
LEFT JOIN Orders o ON c.customer_id = o.customer_id;

-- RIGHT JOIN (see orders without matching customers)
-- Simulate RIGHT JOIN by reversing LEFT JOIN in MySQL
SELECT o.order_id, o.amount, c.name
FROM Orders o
LEFT JOIN Customers c ON o.customer_id = c.customer_id;

-- FULL OUTER JOIN simulation


-- MULTI-TABLE JOIN: Get all order info including product names
SELECT c.name AS customer_name, p.product_name, o.amount
FROM Orders o
JOIN Customers c ON o.customer_id = c.customer_id
JOIN Products p ON o.product_id = p.product_id;

-- AGGREGATE: Total order amount per customer
SELECT c.name, SUM(o.amount) AS total_spent
FROM Customers c
LEFT JOIN Orders o ON c.customer_id = o.customer_id
GROUP BY c.name
ORDER BY total_spent DESC;


-- CASE usage: Mark high/low value orders
SELECT o.order_id, o.amount,
       CASE 
           WHEN o.amount >= 300 THEN 'High Value'
           ELSE 'Low Value'
       END AS order_type
FROM Orders o;
